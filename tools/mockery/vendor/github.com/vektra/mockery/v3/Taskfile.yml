version: "3"

tasks:
  coverage:
    deps: [test]
    desc: run unit tests and create HTML coverage file
    cmds:
      - go tool cover -html=coverage.txt

  fmt:
    desc: auto-format all go files
    sources:
      - "**/*.go"
    cmds:
      - gofumpt -l -w .

  mocks:
    desc: generate new mocks from scratch
    cmds:
      - task: mocks.remove
      - task: mocks.generate

  mocks.remove:
    desc: remove all mock files
    deps:
      - mocks.remove.windows
      - mocks.remove.unix

  mocks.remove.windows:
    desc: remove all mock files on windows
    platforms: ["windows"]
    cmds:
      - rm -f files.txt
      - where /r . '*_mock.go' > files.txt           || true
      - where /r . 'mock_*_test.go' >> files.txt     || true
      - where /r . 'mocks_moq.go' >> files.txt       || true
      - where /r . 'mocks_test.go' >> files.txt      || true
      - where /r . 'mocks_*_test.go' >> files.txt    || true
      - where /r . 'mocks_matryer_*.go' >> files.txt || true
      - where /r . 'mocks.go' >> files.txt           || true
      - powershell -Command 'foreach ($file in Get-Content "files.txt") { If (Test-Path $file) {Remove-Item $file} }'
      - rm -rf mocks/
      - rm -f files.txt


  mocks.remove.unix:
    desc: remove all mock files on unix
    platforms: ["darwin", "linux"]
    cmds:
      - find . -name '*_mock.go' -o -name 'mock_*_test.go' -o -name "mocks_moq.go"  -o -name 'mocks_test.go' -o -name 'mocks_*_test.go' -o -name 'mocks_matryer_*.go' -o -name 'mocks.go' | xargs -r rm
      - rm -rf mocks/

  mocks.generate.custom:
    cmds:
      - go run .

  mocks.generate.testify:
    desc: Generate testify mocks
    cmds:
      - MOCKERY_CONFIG=./.mockery_testify.yml go run .

  mocks.generate.matryer:
    desc: Generate matryer mocks
    cmds:
      - MOCKERY_CONFIG=./.mockery_matryer.yml go run .

  mocks.generate:
    desc: generate mocks
    deps:
      - mocks.generate.testify
      - mocks.generate.matryer

  docker:
    desc: build the mockery docker image
    cmds:
      - docker build -t vektra/mockery .

  mkdocs.install:
    desc: install mkdocs and plugins
    sources:
      - "docs/requirements.txt"
    cmds:
      - pip install -r docs/requirements.txt

  mkdocs.serve:
    desc: serve mkdocs locally
    deps: [mkdocs.install]
    cmds:
      - mkdocs serve

  lint:
    desc: run all the defined linters
    sources:
      - "**/*.go"
    cmds:
      - go run github.com/golangci/golangci-lint/cmd/golangci-lint run

  test:
    cmds:
      - go run gotest.tools/gotestsum --format testname -- -v -coverprofile=coverage.txt ./internal/... ./template_funcs/... ./template/...
    desc: run unit tests
    generates:
      - coverage.txt

  test.e2e:
    desc: run end-to-end tests
    cmds:
      - bash ./e2e/run_all.sh
      - go run gotest.tools/gotestsum --format testname -- -v -count=1 ./e2e/...

  test.ci:
    deps: [lint]
    cmds:
      - task: mocks
      - task: test
      - task: mocks.remove
      - task: test.e2e

  default:
    deps: [test.ci]

  build-tools:
    desc: Build tools directory
    cmds:
    - cd ./tools && go build -o tools .

  tag:
    desc: Tag the git repo with the version specified.
    deps: [build-tools]
    cmds:
    - ./tools/tools tag --dry-run=false

  tag.push:
    desc: Push tags to origin
    cmds:
    - git push origin --tags --force
